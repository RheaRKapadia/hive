<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HIVE Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body class="dashboard-page" data-user-id="<%= userId %>">
    <header>
        <div class="logo">
            <div>
                <img src="/images/Logo.png" alt="Hive Logo">
              </div>
            <h1>HIVE</h1>
        </div>
        <nav>
            <div class="user-menu">
                <a href="/<%= userId %>/userprofile">
                    <img src="/images/avatar.png" alt="User Avatar" class="avatar">
                </a>
                <span class="menu-trigger" onclick="toggleDropdown()">Menu</span>
                <div id="myDropdown" class="dropdown-content">
                    <a href="/<%= userId %>/workouts/">Workouts</a>
                    <a href="/<%= userId %>/painpoints">Pain Management</a>
                    <a href="/<%= userId %>/locations">Locations</a>
                </div>
            </div>
        </nav>
    </header>

    <main class="dashboard-content">
        <div class="first-row">
        <section class="welcome-section">
            <h2>Welcome back <%= user.firstName %>!</h2>
            <div id="quote-container" class="quote">
                <p id="quote-text">Loading quote...</p>
                <span id="quote-author" class="author"></span>
            </div>
        </section>

        <section class="workouts-section">
            <h2>Workout Tracker</h2>
            <div id="workout-calendar" class="workout-calendar">
                <h3 id="current-month-year"></h3>
                <div class="tracker-container">
                    <div class="tracker-grid">
                        <div class="day" data-day="1">1</div>
                        <div class="day" data-day="2">2</div>
                        <div class="day" data-day="3">3</div>
                        <div class="day" data-day="4">4</div>
                        <div class="day" data-day="5">5</div>
                        <div class="day" data-day="6">6</div>
                        <div class="day" data-day="7">7</div>
                        <div class="day" data-day="8">8</div>
                        <div class="day" data-day="9">9</div>
                        <div class="day" data-day="10">10</div>
                        <div class="day" data-day="11">11</div>
                        <div class="day" data-day="12">12</div>
                        <div class="day" data-day="13">13</div>
                        <div class="day" data-day="14">14</div>
                        <div class="day" data-day="15">15</div>
                        <div class="day" data-day="16">16</div>
                        <div class="day" data-day="17">17</div>
                        <div class="day" data-day="18">18</div>
                        <div class="day" data-day="19">19</div>
                        <div class="day" data-day="20">20</div>
                        <div class="day" data-day="21">21</div>
                        <div class="day" data-day="22">22</div>
                        <div class="day" data-day="23">23</div>
                        <div class="day" data-day="24">24</div>
                        <div class="day" data-day="25">25</div>
                        <div class="day" data-day="26">26</div>
                        <div class="day" data-day="27">27</div>
                        <div class="day" data-day="28">28</div>
                        <div class="day" data-day="29">29</div>
                        <div class="day" data-day="30">30</div>
                    </div>
                </div>
            </div>
            <div class="workout-stats">
                <p>You've completed <span id="totalWorkoutDays"><%= totalWorkoutDays %></span> workout days this month!</p>
                <div class="workout-progress">
                    <div class="progress-bar" style="width: 0%;"></div>
                </div>
            </div>
            <p class="motivation-message">"The only bad workout is the one that didn't happen."</p>

        </section>
        <section class="workouts-list-section">
            <h2>Workouts</h2>
            <div id="workouts-list" class="workouts-list">
            </div>
        </section>
    </div>
    <div class="second-row">
        <section class="health-section">
            <h2>Health</h2>
            <div id="health-data" class="health-data">
                <table>
                    <thead>
                        <tr>
                            <th>Days Count</th>
                            <th>Region</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% occurrencesArray.forEach(item => { %>
                            <tr>
                                <td><%= item.daysCount %></td>
                                <td><%= item.region %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </section>

        <section class="locations-section">
            <h2>Locations</h2>
            <div class="locations-list">
                <% locationsList.forEach(location => { %>
                    <a href="/<%= userId %>/locations/location/<%= location.id %>" class="location-link">
                        <%= location.locationName %>
                    </a>
                <% }) %>
            </div>
        </section>
        <section class="water-tracker-section">
            <h2>Water Intake</h2>
            <div class="water-tracker-card">
                <div class="water-tracker-header">
                    <h3>Water Tracker</h3>
                    <button id="resetWaterBtn" class="reset-btn">Reset</button>
                </div>
                <div class="water-tracker-content">
                    <div class="water-bottle-container">
                        <svg id="bottleImage" class="bottle-image" viewBox="0 0 100 200" width="100" height="200">
                            <defs>
                                <clipPath id="bottleClip">
                                    <path id="bottleShape" d="M30 10 L70 10 L80 30 L80 190 L20 190 L20 30 Z" />
                                </clipPath>
                                <radialGradient id="waterGradient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                                    <stop offset="0%" style="stop-color:rgb(0,210,255);stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:rgb(0,150,255);stop-opacity:1" />
                                </radialGradient>
                            </defs>
                            <path id="bottleOutline" d="M30 10 L70 10 L80 30 L80 190 L20 190 L20 30 Z" fill="none" stroke="white" stroke-width="2"/>
                            <g clip-path="url(#bottleClip)">
                                <rect id="waterFill" x="0" y="200" width="100" height="200" fill="url(#waterGradient)" />
                                <path id="waterWave" d="M0 200 Q25 180 50 200 T100 200" fill="url(#waterGradient)">
                                    <animate attributeName="d"
                                             dur="3s"
                                             repeatCount="indefinite"
                                             values="M0 200 Q25 180 50 200 T100 200;
                                                     M0 200 Q25 220 50 200 T100 200;
                                                     M0 200 Q25 180 50 200 T100 200" />
                                </path>
                                <g id="bubbles"></g>
                            </g>
                        </svg>
                    </div>
                    <p id="waterIntakeText" class="intake-text">0ml / 2000ml</p>
                    <div class="water-input">
                        <select id="bottleSelect" class="bottle-select">
                            <option value="">Select your water bottle</option>
                            <option value="739">Hydro Flask (24 oz / 739 ml)</option>
                            <option value="946">Nalgene (32 oz / 946 ml)</option>
                            <option value="621">S'well (25 oz / 621 ml)</option>
                            <option value="769">Yeti Rambler (26 oz / 769 ml)</option>
                            <option value="709">CamelBak Eddy+ (24 oz / 709 ml)</option>
                        </select>
                        <select id="fractionSelect" class="fraction-select">
                            <option value="1">Full bottle</option>
                            <option value="0.75">3/4 bottle</option>
                            <option value="0.5">1/2 bottle</option>
                            <option value="0.25">1/4 bottle</option>
                        </select>
                        <button id="addWaterBtn" class="add-btn">Add Water</button>
                    </div>
                </div>
            </div>
        </section>
    </div>
    </main>
    <script src="/js/dashboard.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const waterFill = document.getElementById('waterFill');
            const waterWave = document.getElementById('waterWave');
            const bottleShape = document.getElementById('bottleShape');
            const bottleOutline = document.getElementById('bottleOutline');
            const waterIntakeText = document.getElementById('waterIntakeText');
            const bottleSelect = document.getElementById('bottleSelect');
            const addWaterBtn = document.getElementById('addWaterBtn');
            const resetWaterBtn = document.getElementById('resetWaterBtn');
            const bubblesContainer = document.getElementById('bubbles');

            let dailyGoal = 2000; // Default goal: 2000ml
            let currentIntake = 0;

            const bottleShapes = {
                '739': "M30 10 L70 10 L75 30 L75 180 C75 185 70 190 65 190 L35 190 C30 190 25 185 25 180 L25 30 Z", // Hydro Flask
                '946': "M30 10 L70 10 L80 30 L80 190 L20 190 L20 30 Z", // Nalgene
                '621': "M35 10 L65 10 C75 30 75 50 75 70 L75 190 C75 195 70 200 65 200 L35 200 C30 200 25 195 25 190 L25 70 C25 50 25 30 35 10 Z", // S'well
                '769': "M30 10 L70 10 L75 30 C80 60 80 90 80 120 L80 190 C80 195 75 200 70 200 L30 200 C25 200 20 195 20 190 L20 120 C20 90 20 60 25 30 Z", // Yeti Rambler
                '709': "M35 10 L65 10 L70 30 L70 180 C70 185 65 190 60 190 L40 190 C35 190 30 185 30 180 L30 30 Z" // CamelBak Eddy+
            };

            function updateWaterTracker() {
                const progress = (currentIntake / dailyGoal) * 100;
                waterFill.setAttribute('y', 200 - (progress * 2));
                waterWave.setAttribute('transform', `translate(0, ${-progress * 2})`);
                waterIntakeText.textContent = `${currentIntake}ml / ${dailyGoal}ml`;
            }

            function updateBottleImage(bottleType) {
                const shape = bottleShapes[bottleType] || bottleShapes['946']; // Default to Nalgene shape
                bottleShape.setAttribute('d', shape);
                bottleOutline.setAttribute('d', shape);
            }

            function addWater() {
                const selectedBottle = parseInt(bottleSelect.value);
                const selectedFraction = parseFloat(fractionSelect.value);
                if (selectedBottle && selectedFraction) {
                    const addedAmount = Math.round(selectedBottle * selectedFraction);
                    currentIntake = Math.min(currentIntake + addedAmount, dailyGoal);
                    updateWaterTracker();
                    animateWaterFill();
                    createBubbles();
                } else {
                    alert("Please select a water bottle and fraction.");
                }
            }

            function animateWaterFill() {
                waterFill.style.transition = 'y 0.5s ease-out';
                waterWave.style.transition = 'transform 0.5s ease-out';
                updateWaterTracker();
                setTimeout(() => {
                    waterFill.style.transition = '';
                    waterWave.style.transition = '';
                }, 500);
            }

            function createBubbles() {
                for (let i = 0; i < 5; i++) {
                    const bubble = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    bubble.setAttribute("cx", Math.random() * 80 + 10);
                    bubble.setAttribute("cy", 200);
                    bubble.setAttribute("r", Math.random() * 3 + 1);
                    bubble.setAttribute("fill", "rgba(255, 255, 255, 0.5)");
                    bubblesContainer.appendChild(bubble);

                    const animateBubble = bubble.animate([
                        { transform: `translate(0, 0)` },
                        { transform: `translate(${Math.random() * 20 - 10}px, -${Math.random() * 100 + 50}px)` }
                    ], {
                        duration: Math.random() * 2000 + 1000,
                        easing: 'ease-out',
                        fill: 'forwards'
                    });

                    animateBubble.onfinish = () => bubble.remove();
                }
            }

            function resetIntake() {
                currentIntake = 0;
                updateWaterTracker();
                bottleSelect.value = '';
                updateBottleImage('');
                bubblesContainer.innerHTML = '';
            }

            addWaterBtn.addEventListener('click', addWater);
            resetWaterBtn.addEventListener('click', resetIntake);

            bottleSelect.addEventListener('change', function() {
                updateBottleImage(this.value);
                addWaterBtn.disabled = !this.value;
            });

            fractionSelect.addEventListener('change', function() {
                addWaterBtn.disabled = !(this.value && bottleSelect.value);
            });


            // Initial update
            updateWaterTracker();
            addWaterBtn.disabled = true;
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM Content Loaded');
            const days = document.querySelectorAll('.day');
            console.log('Number of day elements:', days.length);

            let completedDays = JSON.parse(localStorage.getItem('completedDays')) || [];
            console.log('Initial completed days:', completedDays);

            // New function to update the current month and year
            function updateCurrentMonthYear() {
                const now = new Date();
                const monthNames = ["January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"
                ];
                const currentMonthYear = `${monthNames[now.getMonth()]} ${now.getFullYear()}`;
                document.getElementById('current-month-year').textContent = currentMonthYear;
            }

            function updateUI() {
                console.log('Updating UI');
                updateCurrentMonthYear(); // Call the new function
                days.forEach(day => {
                    const dayNumber = parseInt(day.dataset.day, 10);
                    if (completedDays.includes(dayNumber)) {
                        day.classList.add('completed');
                        console.log(`Day ${dayNumber} marked as completed`);
                    } else {
                        day.classList.remove('completed');
                        console.log(`Day ${dayNumber} marked as not completed`);
                    }
                });

                // Update total workout days
                const totalWorkoutDaysElement = document.getElementById('totalWorkoutDays');
                if (totalWorkoutDaysElement) {
                    totalWorkoutDaysElement.textContent = completedDays.length;
                }

                // Update progress bar
                const progressBar = document.querySelector('.progress-bar');
                if (progressBar) {
                    const progress = (completedDays.length / 30) * 100;
                    progressBar.style.width = `${progress}%`;
                }
            }

            function updateWorkoutCalendar(completedDays) {
                const userId = document.body.dataset.userId;
                fetch(`/${userId}/updateWorkoutCalendar`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ completedDays }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        console.error('Error updating workout calendar:', data.error);
                    } else {
                        console.log('Workout calendar updated successfully');
                        updateUI();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }

            // Initial UI update
            updateUI();

            days.forEach(day => {
                day.addEventListener('click', function () {
                    console.log('Day clicked:', this.dataset.day);
                    const dayNumber = parseInt(this.dataset.day, 10);
                    const index = completedDays.indexOf(dayNumber);

                    if (index > -1) {
                        completedDays.splice(index, 1);
                        console.log(`Removed day ${dayNumber} from completed days`);
                    } else {
                        completedDays.push(dayNumber);
                        console.log(`Added day ${dayNumber} to completed days`);
                    }

                    localStorage.setItem('completedDays', JSON.stringify(completedDays));
                    console.log('Updated localStorage:', JSON.parse(localStorage.getItem('completedDays')));

                    // Update the server and UI
                    updateWorkoutCalendar(completedDays);
                });
            });
        });
    </script>
    <script>
        function toggleDropdown() {
            document.getElementById("myDropdown").classList.toggle("show");
        }

        // Close the dropdown if the user clicks outside of it
        window.onclick = function(event) {
            if (!event.target.matches('.user-menu span')) {
                var dropdowns = document.getElementsByClassName("dropdown-content");
                for (var i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        }


    </script>
</body>
</html>
